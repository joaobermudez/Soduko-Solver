----->Soduko Solver<------ from kaggle notebook

# %% [code]
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

# %% [code]
grid = [[5,3,0,0,7,0,0,0,0],
       [6,0,0,1,9,5,0,0,0],
       [0,9,8,0,0,0,0,6,0],
       [8,0,0,0,6,0,0,0,3],
       [4,0,0,8,0,3,0,0,1],
       [7,0,0,0,2,0,0,0,6],
       [0,6,0,0,0,0,2,8,0],
       [0,0,0,4,1,9,0,0,5],
       [0,0,0,0,8,0,0,7,9]]

# %% [code]
print(grid)

# %% [code]
print(np.matrix(grid))

# %% [code]
def poss (y,x,n):
    global grid
    for i in range(0,9):
        if grid [y][i]==n:
            return False
    for i in range (0,9):
        if grid [i][x]==n:
            return False
    xin=(x//3)*3
    yin=(y//3)*3
    for i in range (0,3):
        for o in range (0,3):
            if grid[yin + i][xin + o] ==n:
                return False
    return True

# %% [code]
poss(4,4,2)

# %% [code]
poss(4,4,5)

# %% [code]
def findAns():
    global grid
    for y in range (9):
        for x in range (9):
            if grid[y][x]==0:
                for n in range (1,10):
                    if poss(y,x,n):
                        grid[y][x]=n
                        findAns()
                        grid[y][x]=0
                return
    print(np.matrix(grid))
    input()

# %% [code]
findAns()

# %% [code]
grid2 = [[5,3,0,0,7,0,0,0,0],
       [6,0,0,1,9,5,0,0,0],
       [0,9,8,0,0,0,0,6,0],
       [8,0,0,0,6,0,0,0,3],
       [4,0,0,8,0,3,0,0,1],
       [7,0,0,0,2,0,0,0,6],
       [0,6,0,0,0,0,2,8,0],
       [0,0,0,4,1,9,0,0,5],
       [0,0,0,0,8,0,0,7,9]]

# %% [code]
print(np.matrix(grid2))

# %% [code]
findAns()
